USE accounting;

DROP PROCEDURE IF EXISTS GetCompanyData;
DELIMITER //
CREATE PROCEDURE GetCompanyData(_userId int)
BEGIN
    SELECT 
        mt.TransactionType,
        DATE_FORMAT(mtd.TransactionDate, '%b') AS TransactionMonth,   -- Abbreviated month format (MMM)
        EXTRACT(YEAR FROM mtd.TransactionDate) AS TransactionYear,    -- Extracting year
        SUM(mtd.Cost) AS Cost,
        SUM(mtd.Quantity) AS Quantity
    FROM 
        moduletransaction mt
    JOIN 
        ModuleTransactionDusersusersetails mtd ON mt.transactionid = mtd.transactionid
    JOIN 
        users u ON u.userid = mtd.userid
    WHERE 
        u.userid = _userId
    GROUP BY 
        mt.TransactionType,
        TransactionMonth,   -- Use the alias for better clarity
        TransactionYear;    -- Use the alias for better clarity
END //

DELIMITER ;



DROP PROCEDURE IF EXISTS GetChartRoles;
DELIMITER \\

CREATE PROCEDURE GetChartRoles(IN inputUserId INT)
BEGIN
    SELECT 
        CASE 
            WHEN users.Designation = 'CEO' THEN JSON_ARRAY('CEO', 'CTO', 'Manager', 'User')   -- CEO can see all roles
            WHEN users.Designation = 'CTO' THEN JSON_ARRAY('CTO', 'Manager', 'User')           -- CTO can see CTO, Manager, User
            WHEN users.Designation = 'Manager' THEN JSON_ARRAY('Manager', 'User')                  -- Manager can see Manager, User
            ELSE JSON_ARRAY('User')  -- All other users see only 'User'
        END AS Roles
    FROM Users users
    WHERE users.userid = inputUserId;
END \\

DELIMITER ;
